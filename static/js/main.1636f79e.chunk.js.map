{"version":3,"sources":["logo.svg","modules/quoter/Quoter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Quoter","props","changeQuote","setState","currentQuote","Math","floor","random","state","quotes","length","mQuotes","bind","className","id","this","phrase","movie","year","onClick","href","target","rel","React","Component","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,kC,usHCItBC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAORC,YAAc,kBACZ,EAAKC,UAAS,iBAAO,CACnBC,aAAcC,KAAKC,MAAMD,KAAKE,SAAW,EAAKC,MAAMC,OAAOC,aAR7D,EAAKF,MAAQ,CACXJ,aAAc,EACdK,OAAQE,GAEV,EAAKT,YAAc,EAAKA,YAAYU,KAAjB,gBANF,E,qDAajB,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,YAAYC,GAAG,aAC5B,oDACA,yBAAKD,UAAU,QACb,uBAAGC,GAAG,QAAQC,KAAKP,MAAMC,OAAOM,KAAKP,MAAMJ,cAAcY,SAE3D,uBAAGF,GAAG,UAAN,KACKC,KAAKP,MAAMC,OAAOM,KAAKP,MAAMJ,cAAca,MAC7C,KACAF,KAAKP,MAAMC,OAAOM,KAAKP,MAAMJ,cAAcc,MAG9C,6BACA,yBAAKL,UAAU,WACb,4BAAQM,QAASJ,KAAKb,YAAaY,GAAG,aAAtC,aAGA,uBACED,UAAU,MACVC,GAAG,cACHM,KAAI,gDACFL,KAAKP,MAAMC,OAAOM,KAAKP,MAAMJ,cAAcY,OADzC,eAGFD,KAAKP,MAAMC,OAAOM,KAAKP,MAAMJ,cAAca,MAHzC,uCAKJI,OAAO,SACPC,IAAI,uBAEJ,uBAAGT,UAAU,UACb,0BAAMA,UAAU,SAAhB,iB,GA5CsBU,IAAMC,WCuB3BC,MAtBf,WACE,OACE,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,yBAAKa,IAAKC,IAAMd,UAAU,WAAWe,IAAI,UAE3C,yBAAKf,UAAU,WACb,2BACE,uBACEO,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAHN,8BCFUO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1636f79e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.cd2fd5e7.svg\";","import React from \"react\";\nimport \"./Quoter.css\";\nimport mQuotes from \"./quotes.json\";\n\nexport default class Quoter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentQuote: 0,\n      quotes: mQuotes,\n    };\n    this.changeQuote = this.changeQuote.bind(this);\n  }\n  changeQuote = () =>\n    this.setState(() => ({\n      currentQuote: Math.floor(Math.random() * this.state.quotes.length),\n    }));\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"container\" id=\"quote-box\">\n          <h1>Movies Quote Machine</h1>\n          <div className=\"text\">\n            <p id=\"text\">{this.state.quotes[this.state.currentQuote].phrase}</p>\n          </div>\n          <p id=\"author\">\n            - {this.state.quotes[this.state.currentQuote].movie}\n            {\", \"}\n            {this.state.quotes[this.state.currentQuote].year}\n          </p>\n\n          <br />\n          <div className=\"buttons\">\n            <button onClick={this.changeQuote} id=\"new-quote\">\n              New quote\n            </button>\n            <a\n              className=\"btn\"\n              id=\"tweet-quote\"\n              href={`https://twitter.com/intent/tweet?text=${\n                this.state.quotes[this.state.currentQuote].phrase\n              }%20-${\n                this.state.quotes[this.state.currentQuote].movie\n              }&via=estebmaister&hashtags=movieFan`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <i className=\"tweet\"></i>\n              <span className=\"label\">tweet</span>\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Quoter from \"./modules/quoter/Quoter.js\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Quoter />\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      </header>\n      <div className=\"credits\">\n        <p>\n          <a\n            href=\"https://teban.co.ve\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Â© Estebmaister 2020\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}